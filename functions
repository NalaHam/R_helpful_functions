#basic stuff

#df[row,coln]

#find the variance of a list:
var(list_a)

#find the standard deviation:
sd(list_a)

#find descriptive statistics:
summary(list_a) #gives min, 1st qu, median, mean, 3rd qu, max

#find the standard error of the mean (SEM), where n is the sample size
SEM <- sd(list_a)/sqrt(n)

#other stuff
table(list_a) #gives a table with all the unique values in the list with their frequencies

#creating a dataframe:
first_column <- c("value_1", "value_2", ...)
second_column <- c("value_1", "value_2", ...)
df <- data.frame(first_column, second_column)



------------------------------------------------------------------
#combining dfs 
df <- rbind(df, df1) #combines dfs vertically (needs to have same columns)

df <- merge(df, df1, by = "A") #combines dfs horizontally by a shared A column. This will add new columns.


------------------------------------------------------------------
#sum functions 

sum(df$coln1 == "type A", na.rm = TRUE)  #sums rows where coln1 is type A. na.rm = TRUE tells R to skip rows where coln1 is NA

sum(df[which(df$col1=="A"), 2]) #sums col 2 for the times when col1 = A

df$coln2 <- rowSums(df[, 3:13]) #make a new column that is the sum of the 3rd to 13th column going horizontally

df <- ddply(df, "coln_name", numcolwise(sum)) #sum of the columns with respect to the individual different coln_name strings or values

sum(data[which(data$coln1=='A'),2 ]) #sum column 2 for the times where coln1 = A

n_distinct(df$coln1) #sum of how many different strings are in coln1 in df

length(unqiue(df$coln1)) #sum of how many different strings are in coln1 in df

sum(is.na(df$coln1)) #sum of NA values in coln1


------------------------------------------------------------------
#subseting df

df <- data.frame(df$coln1, df$coln2, df$coln3) #selects coln1,2,3 from df and makes a new one from them

new_df <- df[ 50:100, ] #subset out rows 50-100 as a new df 

new_df <- df[ , 50:100] #subset out colns 50-100 as a new df

df <- subset(df, df$col1 == "A") #R base function that makes a df just like og but only with the rows where col1 = A (used for smaller data)

df <- filter(df, df$col1 == "A") #dplyr function that does the same as subset but is useful for large data

df_new <- filter(df, my_column %in% vals) #dplyr function where vals is a list

df <- distinct(df, .keep_all = TRUE) #keep only the unique rows in df

#keeping and removing characters ina row
df$coln1 <- substr(df$coln1, 1, 12) #keeps coln1 first 12 characters for each row
df$coln1 <- substr(df$coln1, start, end) #general form. The start is the first character to be kept (interger) and stop is the last character you want to keep.

gene_counts <- gene_counts %>%
  mutate(ensembl_id = substr(name, 1, nchar(name) - 1)) #keeps everything except the last character

df <- df[df$coln1 == 'A, B',] #subset data where coln1 equals A or B

#remove rows where a column is a certain string
remove <- c("A","C") #the strings you want to remove from coln1 of df

df <- df[!grepl(paste(remove, collapse='|'), df$coln1), ]

#for when it is just one string:
df <- df[!grepl('A', df$coln1), ]

df <- df[!is.na(df$coln1), ] #remove rows where coln1 is NA

#remove columns in df
df <- df[-c(1, 4:14)]

#create a new summary df that gives info on how many times a certain string happens in a column
library(ggplot2)
chromosome_counts <- counts_test_a %>%
  group_by(chr) %>%
  summarize(count = n()) %>%
  ungroup()

------------------------------------------------------------------
#transforming

#creating a new column
df$new_coln <- c("value_1","value_2", ...)

#creating a new row
df[nrow(df) + 1,] = c("v1","v2")

#substituting a cell value
df$coln[df$coln == 'old_value'] <- 'new_value' 

#changing column names
colnames(df_2) <- c('coln1','coln2') 
names(df)[1] <- 'A' #change first column name to A
 or
library("dplyr")
my_dataframe <- my_dataframe %>% 
       rename("id" = "c1") #renames c1 to id

#reordering columns
df <- df[,c(1,3,2,4)] #changes columns 2 and 3

#remove rows
df <- df[2:4,] #removes first row
df <- df[-1.] #removes first row

#remove columns 
df <- df[,-1] #removes first column

#making a column all lowercase
df$coln1 <-tolower(df$coln1)

data<-replace(df$Marks, df$Marks<0, 0) #replace values in a column

df$address[df$address == 'Orange St'] <- 'Portola Pkwy' #replace string with another one in a column

df$address <- sub('f','F',df$address) #Replace first character occurrence in a string

df$work_address <- gsub('p','P',df$work_address) #Replace all occurance of a character

names(df) <- gsub("\\.", "-", names(df), fixed=TRUE) #substitute periods in all columns with dashes, the \\ is only used for periods

library(dplyr)
df <- df %>% 
        rename(
            new_coln_name = old_coln_name, 
            new_coln_name1 = old_coln_name1
            )                                 #renames colns using the dplyr package

df$coln1 <- substr(df$coln1, 1, 12) #keeps coln1 first 12 characters for each row

test_genome$genes <- substr(test_genome$genes, 1, nchar(test_genome$genes) - 1) #remove last character for a column


#create a new column of the names of the rows
library(tibble)
df <- tibble::rownames_to_column(df, "new_coln")


row.names(df) <- c(1:k) #rename rows to be numbers from 1 to k


##get last n characters in each row for a column 

    substrRight <- function(x, n){
      substr(x, nchar(x)-n+1, nchar(x))
    }
    
df$coln2 <- substrRight(df$coln1, 6) #keep last 6 characters for coln1

#reorder columns
df <- df %>% relocate(coln4, .after = coln2 ) #if no .after then it automaticaly becomes the first column


df[2,] <- c("A", colSums(df[, 2:14], na.rm = TRUE)) #makes row 2 named A and the rest of the row is the sum of each column from 2 to 14

#switch rows and columns
df <- t(df)

or

df2 <- data.frame(t(df[-1])) #transpose all data frame except the first column. The result being a matrix that we need to convert to a data frame.
colnames(df2) <- df[, 1]  #we assign as column names of df2the first column of the original data frame df.

#separate the strings in a column by a comma and make new row with each of those strings
mydf %>% 
    mutate(coln = strsplit(as.character(coln), ",")) %>% 
    unnest(coln)

#remove empty space on either side of a string for a coln
filtering_nala_ex_long <- filtering_nala_ex_long %>% 
  mutate(across(where(is.character), trimws)) #dplyr function

------------------------------------------------------------------
#df additions
df[coln_name, 7] <- c #add in c to the 7th row and coln_name column

df[nrow(df) +1, ] <- "A" #adds one row


------------------------------------------------------------------
#file stuff
write.csv(df, "file_name.csv") #saves a csv file to directory 

------------------------------------------------------------------
#for loops
fruits <- list("apple", "banana", "cherry")

for (x in fruits) {
  print(x)
}

df_2 <- data.frame(matrix(, nrow=3, ncol=0)) #create an empty df 

#add columns to df using for loop
for(i in 1:3) {                                   # Head of for-loop
  new <- rep(NA, nrow(df_2))                       # Create new column
  df_2[ , ncol(df_2) + 1] <- new                  # Append new column
  colnames(df_2)[ncol(df_2)] <- paste0("new", i)  # Rename column name
}


